// import phones from 'api/mockPhones'
// import categories from 'api/mockCat'
import * as R from 'ramda'
import request from 'superagent'

//получаем информацию из мокового элемента через промисы для работы await на том конце

export const fetchPhones = async () => {
  // return new Promise((resolve, reject) => {
  //   resolve(phones)
  // })
  const {body} = await request.get(
    'https://run.mocky.io/v3/c532428e-ff55-4467-958e-3559856f0c31'
  )
  return body.phones
}

//докачиваем еще элементов, а на деле - повторяем ту же закачку

export const loadMorePhones = async ({offset}) => {
  // return new Promise((resolve, reject) => {
  //   resolve(phones)
  // })

  const {body} = await request.get(
    'https://run.mocky.io/v3/c532428e-ff55-4467-958e-3559856f0c31'
  )
  return body.phones
}

//получаем по айдишнику всю инфу по элементу

export const fetchPhoneById = async (id) => {
  // return new Promise((resolve, reject) => {
  //   const phone = R.find(R.propEq('id', id), phones)
  //   resolve(phone)
  // })

  const {body} = await request.get(
    'https://run.mocky.io/v3/c532428e-ff55-4467-958e-3559856f0c31'
  )

  const phone = R.find(R.propEq('id', id), body.phones)

  return phone
}

export const fetchCategories = async () => {
  const {body} = await request.get(
    'https://run.mocky.io/v3/c548570a-39aa-4c09-a961-b1b75d8f09ec'
  )
  return body.categories
}























//
// import phones from 'api/mockPhones'
//
// export const fetchPhones = async () => {
//   return new Promise((resolve, reject) => {
//     resolve(phones)
//   })
// }