import * as R from 'ramda'

export const getActiveCategoryId = ownProps => R.path(['match', 'params', 'id'], ownProps) //ищем элементы по цепочке

export const getPhoneById = (state, id) => R.prop(id, state.phones)

//готовим функцию для поиска элемента по айдишнику

export const getPhones = (state, ownProps) => {

  const activeCategoryId = getActiveCategoryId(ownProps)

 // const phones = R.map(id => getPhoneById(state,id), state.phonesPage.ids)
 //
 //  return phones

  const applySearch = item => R.includes(
    state.phonesPage.search,
    R.prop('name', item)
  )

    //сортируем по соответствию имени

  const applyCategory = item => R.equals(
    activeCategoryId,
    R.prop('categoryId', item)
  )

  const phones = R.compose(
    R.filter(applySearch),
    R.when(R.always(activeCategoryId), R.filter(applyCategory)), //фильтруем на соответствие роута айдишника и категории
    // .when как условие цепного запуска функции,
    // .always для получения значения
    R.map(id => getPhoneById(state,id))
  )(state.phonesPage.ids)

  return phones

 //вытаскиваем айдишники из ids и сравниваем их со всеми айдишниками в общем документе, сравнивая state.phone и state.phonePage.ids
}

export const getRenderedPhonesLength = state => R.length(state.phonesPage.ids)

//определяем длинну массива ids для offset'а

export const getTotalBasketCount = state => R.length(state.basket)

export const getTotalPrice = state => { //получаем общую сумму из цены пункта price, отсортированных по айдишнику в корзине
   const totalPrice = R.compose(
     R.sum,
     R.pluck('price'),
     R.map(id => getPhoneById(state, id))
  )(state.basket)

 return totalPrice

}

export const getCategories = state => R.values(state.categories)


export const getBasketPhonesWithCount = state => {
  const phoneCount = id => R.compose(
    R.length, //вычисляем число повторов телефонов
    R.filter(basketId => R.equals(id, basketId)) //фильтруем переданные в корзину айдишники по уже имеющимся для определения длины в будущем
  )(state.basket)
  const phoneWithCount = phone => R.assoc('count', phoneCount(phone.id), phone) //добавляем телефонам поле count
  const uniqIds = R.uniq(state.basket) //ищем в корзине уникальные айдишники
  const phones = R.compose (
    R.map(phoneWithCount),
    R.map(id => getPhoneById(state, id))
  )(uniqIds)

  return phones
}
