import {
  FETCH_PHONES_START, FETCH_PHONES_SUCCESS, FETCH_PHONES_FAILURE,
  LOAD_MORE_PHONES_START, LOAD_MORE_PHONES_SUCCESS, LOAD_MORE_PHONES_FAILURE,
  FETCH_PHONE_BY_ID_START, FETCH_PHONE_BY_ID_SUCCESS, FETCH_PHONE_BY_ID_FAILURE, ADD_PHONE_TO_BASKET, SEARCH_PHONE,
  FETCH_CAT_START, FETCH_CAT_SUCCESS, FETCH_CAT_FAILURE, REMOVE_PHONE_FROM_BASKET, CLEAN_BASKET
} from 'actionTypes'
import {
  fetchPhones as fetchPhonesApi,
  loadMorePhones as loadMorePhonesApi,
  fetchPhoneById as fetchPhoneByIdApi,
  fetchCategories as fetchCategoriesApi
} from 'api'
import {getRenderedPhonesLength} from 'Selectors'


export const fetchPhones = () => async dispatch => {
  dispatch({
    type: FETCH_PHONES_START //просто старт
  })

  try{
    const phones = await fetchPhonesApi() //промисы
    dispatch({
      type: FETCH_PHONES_SUCCESS,
      payload: phones //получаем завеченные моковые данные из промиса
    })
  } catch(e){
    dispatch({
      type: FETCH_PHONES_FAILURE,
      error: true,
      payload: e //обработка ошибки
    })
  }
}


export const loadMorePhones = () => async (dispatch, getState) => {
  const offset = getRenderedPhonesLength(getState()) //получаем длинну всех прошлых элементов
  dispatch({
    type: LOAD_MORE_PHONES_START //просто старт
  })

  try{
    const phones = await loadMorePhonesApi({offset}) //подгружаем все прошлые элементы из промисов
    dispatch({
      type: LOAD_MORE_PHONES_SUCCESS,
      payload: phones //получаем завеченные моковые данные из промиса
    })
  } catch(e){
    dispatch({
      type: LOAD_MORE_PHONES_FAILURE,
      error: true,
      payload: e //обработка ошибки
    })
  }
}


export const fetchPhoneById = id => async dispatch => {

  dispatch({type: FETCH_PHONE_BY_ID_START})

  try{
    const phone = await fetchPhoneByIdApi(id)
    dispatch({
      type: FETCH_PHONE_BY_ID_SUCCESS,
      payload: phone
    })
  }catch(e){
    dispatch({
      type: FETCH_PHONE_BY_ID_FAILURE,
      payload: e,
      error: true
    })
  }
}


export const addPhoneToBasket = id => dispatch => {
  dispatch({
    type: ADD_PHONE_TO_BASKET,
    payload: id
  })
}

export const searchPhone = text => dispatch => {
  dispatch({
    type: SEARCH_PHONE,
    payload: text
  })
}


export const fetchCategories= () => async dispatch => {
  dispatch({
    type: FETCH_CAT_START //просто старт
  })

  try{
    const categories = await fetchCategoriesApi() //промисы
    dispatch({
      type: FETCH_CAT_SUCCESS,
      payload: categories //получаем завеченные моковые данные из промиса
    })
  } catch(e){
    dispatch({
      type: FETCH_CAT_FAILURE,
      error: true,
      payload: e //обработка ошибки
    })
  }
}

export const removePhoneFromBasket = id => dispatch => {
  dispatch({
    type: REMOVE_PHONE_FROM_BASKET,
    payload: id
  })
}

export const cleanBasket = () => dispatch => {
  dispatch({
    type: CLEAN_BASKET
  })
}

export const basketCheckout = phones => {
  alert(JSON.stringify(phones))
}















//
// export const addPhoneToBasket = id => dispatch => {
//   dispatch({
//     type: ADD_PHONE_TO_BASKET,
//     payload: id
//   })
// }












// import {FETCH_PHONES_START, FETCH_PHONES_SUCCESS, FETCH_PHONES_FAILURE} from 'actionTypes'
// import {fetchPhones as fetchPhonesApi} from 'api'
//
// export const fetchPhones = () => async dispatch => {
//   dispatch({
//     type: FETCH_PHONES_START
//   })
//
//   try{
//     const phones = await fetchPhonesApi()
//     dispatch({
//       type: FETCH_PHONES_SUCCESS,
//       payload: phones
//     })
//   } catch(e){
//     dispatch({
//       type: FETCH_PHONES_FAILURE,
//       payload: e,
//       error: true
//     })
//   }
// }